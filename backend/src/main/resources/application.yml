spring:
  application:
    name: backend
  config:
    import: optional:file:.env[.properties]  # .env 파일을 .properties 형식으로 로드

  datasource:
    url: ${DB_URL}  # .env에서 로드한 DB_URL 사용
    username: ${DB_USERNAME}  # .env에서 로드한 DB_USERNAME 사용
    password: ${DB_PASSWORD}  # .env에서 로드한 DB_PASSWORD 사용
    driver-class-name: com.mysql.cj.jdbc.Driver

  output:
    ansi:
      enabled: always  # 콘솔에서 색깔 출력 활성화

  jpa:
    hibernate:
      ddl-auto: update  # 데이터베이스 스키마 자동 업데이트
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true  # SQL 포맷팅
        show_sql: true
        default_batch_fetch_size: 100  # 배치 페치 크기
        highlight-sql: true  # SQL 강조

  security:
    oauth2:
      client:
        registration:
          naver:
            client_id: ${SPRING_SECURITY_NAVER_CLIENT_ID}
            client_secret: ${SPRING_SECURITY_NAVER_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/api/v1/user/naver/login/naver/callback
            authorization-grant-type: authorization_code
            scope:
              - email
          google:
            client-id: ${SPRING_SECURITY_GOOGLE_CLIENT_ID}
            client_secret: ${SPRING_SECURITY_GOOGLE_CLIENT_SECRET}
            redirect-uri: ${SPRING_SECURITY_GOOGLE_REDIRECT_URI}
            authorization-grant-type: authorization_code
            scope:
              - email
            client-name: Google
            provider: google
          kakao:
            client-id: ${SPRING_SECURITY_KAKAO_CLIENT_ID}
            redirect-uri: ${SPRING_SECURITY_KAKAO_REDIRECT_URI}
            authorization-grant-type: authorization_code
            scope: account_email
            client-name: Kakao
            provider: kakao
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me

  data:
    redis:
      host: localhost
      port: 6379

  profiles:
    active: oauth

mail:
  host: ${SPRING_MAIL_HOST}
  port: ${SPRING_MAIL_PORT}
  username: ${SPRING_MAIL_USERNAME}
  password: ${SPRING_MAIL_PASSWORD}
  properties:
    mail.smtp.auth: true
    mail.smtp.starttls.enable: true

springdoc:
  default-produces-media-type: application/json;charset=UTF-8  # 기본 JSON 미디어 타입

logging:
  level:
    org.hibernate.SQL: DEBUG  # Hibernate SQL 로그 레벨 설정
    org.hibernate.orm.jdbc.bind: TRACE  # Hibernate 바인딩 로그 레벨 설정
    org.hibernate.orm.jdbc.extract: TRACE  # Hibernate JDBC 추출 로그 레벨 설정
    org.springframework.data.redis: DEBUG  # Spring Data Redis 로그 레벨 추가

jwt:
  secret:
    key: ${JWT_SECRET_KEY}
  expiration:
    time: 3600000  # AccessToken expired time : 1h(60min)
  refresh-token:
    expiration-time: 1800000  # RefreshToken expired time : 30min

aes:
  secret:
    key: ${AES_SECRET_KEY}

auth :
  key : ${AUTHORIZATION_KEY}

# JWT Test Settings (commented out)
#jwt:
#  expiration:
#    time: 60000  # AccessToken expired time : 1m(60sec)
#  refresh-token:
#    expiration-time: 120000  # RefreshToken expired time : 2min(120sec)

file:
  upload-dir: ${FILE_UPLOAD_DIR}
